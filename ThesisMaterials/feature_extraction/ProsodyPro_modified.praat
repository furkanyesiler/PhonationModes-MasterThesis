# _ProsodyPro (previously: _TimeNormalizeF0.praat)
# Version 5.7.6
# Last update: 23 September, 2017
# Written by:   Yi Xu; all rights reserved.
# Report any bugs to Yi Xu (yi.xu@ucl.ac.uk)

# Find more information at http://www.homepages.ucl.ac.uk/~uclyyix/ProsodyPro/

# SYNOPSIS: 
# 1) Automatically open each .wav file in a folder, manually label intervals and rectify 
# vocal pulse markings; 
# 2) Save automatically trimmed (smoothed) f0 contours; 
# 3) Save time-normalized f0; 
# 4) Save time-normalized f0 with actual time; 
# 5) Save manually rectified, trimmed f0 as PitchTier objects which can replace the pitch 
# tier in Manipulation objects; 
# 6) Save sampled f0; 
# 7) Save f0 velocity; 
# 8) Save maxf0, minf0, excursionsize, mean f0, intensity, duration, peak velocity, final velocity and final f0 of labeled intervals;
# 9) Save results into ensemble files.
# 10) Save averaged across speakers.

# INSTRUCTIONS:

# 1. Put all the (or a group of) sound files to be analyzed in a single folder together with 
# this script, and launch Praat;

# 2. Select Open Praat Script... from the top menu;

# 3. Locate this script in the dialogue window and select it;

# 4. When the script window opens in Praat, select Run from the Run menu (or type the key 
# shortcut command-r or control-r);

# 5. When a dialogue window opens, check or uncheck the boxes according to your analysis needs, 
# and set appropriate values in the text fields or simply use the default values.

# 6. Click OK and three windows will appear. The first big window displays the waveform together 
# with vocal cycle marks (vertical lines) generated by Praat. This is where you can manually 
# make sure the F0 tracking is accurate by adding marks to those vocal cycles missed by Praat 
# and deleting any redundant marks. But you need to do so only for the named intervals, as 
# explained next.

# 7. The second big window displays the waveform and spectrogram of the current sound together 
# with optional pitch track and formant tracks in the spectrogram panel, and vocal pulse marks 
# in the waveform panel. (These tracks and marks cannot be manually changed. So you can hide 
# them to reduce processing time by using the corresponding menu.) At the bottom of this window 
# are two TextGrids, where you can insert interval boundaries (upper grid) and point labels 
# (lower grid). Most importantly, for any interval that you want to have analysis results saved, 
# you need to type a name. Make the name as simple as possible to save time, e.g., a, b, or 1, 2.

# 8. When you are done with manual correction and labeling, activate the third, small window.
# Click "Continue" there and two new big windows will appear, displaying the spectrogram, 
# waveform and vocal cycle marks of the next sound file in the folder. You can repeat this 
# process until all the sound files in the folder are processed. Or you can finish at any point  
# by clicking the "Finish" button in the small window (Do not press the stop button! You will lose
# the changes to the current file and see some unpleasant messages!) Please remember to note down 
# the current file number in pop_up window so that
# you know where to start when you want to continue the labeling next time.

# 9. New! If you want to jump to any file, just replace the current number in the small
# window with the new file number minus one. For example, if you want to jump to file 1, enter 0.

# 10. Each time you press the "Continue" button in the small window, various analysis results 
# are saved for the current sound into individual text files as described below. If, however,
# you want to change certain analysis parameters after processing all the sound files, you
# can rerun the script, set the "Input File No" to 1 in the initial Dialogue window and uncheck
# the "Pause between sound files" button before pressing "OK". The script will then run by 
# itself and cycle through all the sound files in the folder one by one. Just watch the action 
# with amusement.

# 10. The following files will be saved as each sound file is processed:  

# 	.rawf0 -- raw with real time computed directly from the pulse markings.

# 	.f0 -- trimmed f0 with real time.

# 	.normtimef0 -- time-normalized f0. The f0 in each interval is divided 
# 	into the same number of points (default = 10). Thus points 1-10 belong to interval 1, and 
# 	points 11-20 belong to interval 2, etc.

# 	.actutimenormf0 -- time-normalized f0 with each interval divided into the same number
# 	of points (default = 10). But the time scale is the original, except
# 	that the onset time of interval 1 is set to 0, unless the "Set initial time to 0" box in 
# 	the initial dialogue window is unchecked.  

# 	.samplef0 -- f0 values at fixed time intervals specified by "f0 sample rate".    

# 	.smoothf0 -- samplef0 f0 smoothed by a triangular window.

# 	.f0velocity -- velocity profile (instantaneous rates of F0 change) of f0 contour in 
# 	semitone/s at fixed time intervals specified by "f0 sample rate".

# 	.means -- containing various measurements, including maxf0, minf0, excursion size,  
# 	mean intensity, duration, max_velocity, final_velocity. Final velocity is taken at a point
#   earlier than the interval offset by time specified by "Final offset" in the 
#   startup dialogue window. It is an indicator of the slope of the underlying target of the interval.
#	Final f0 is is an indicator of the height of the underlying target, taken also at a point
#   specified by "Final offset" in the startup dialogue window.

# 11. The values in these files correspond only to the named intervals, i.e., those with 
# text names. No values are saved for the blank intervals.

# 12. The .f0, .normtimef0, and .actutimenormf0 files can be opened by a graphing program 
# such as Excel. The left-hand column is time and the right-hand column f0.

# 13. The .means file contains values of maxf0, minf0, excursionsize, meanf0, mean intensity, duration and 
# peak velocity (if "Get sample f0 box" has been checked when processing individual files) of 
# all named intervals.

# 14. After the analysis of all the individual sound files are done, you can gather the analysis 
# results into a number of ensemble files by running the script again and checking the "Get 
# ensemble results" button in the initial dialogue window. The following ensemble files are saved:

#		1)	normf0.txt
#		2)	normtime_semitonef0.txt
#		3)	normtime_f0velocity.txt
#		4)	normtimeIntensity.txt
#		5)	normactutime.txt
#		6)	maxf0.txt
#		7)	minf0.txt
#		8)	excursionsize.txt
#		9)	meanf0.txt
#		10)	duration.txt
#		11)	maxvelocity.txt
#		12)	finalvelocity.txt
#		13)	finalf0.txt
#		14)	meanintensity.txt
#		15)	samplef0.txt
#		16)	f0velocity.txt
#		17)	maxf0_loc_ms.txt
#		18)	maxf0_loc_ratio.txt

# 15. Note that you can generate an ensemble file only if you have saved at least one  
# corresponding individual analysis file described earlier.


# If your corpus consists of repeated trials, you can obtain average measurements over all the 
# repetitions of each unique condition. This can be done by changing number_of_repetitions in the 
# dialogue window to the repetition number in your corpus and then check Get ensemble files before 
# pressing the OK button. The following averaged files will be saved:

#		19)	mean_normf0.txt
#		20)	mean_normtime_semitonef0.txt
#		21)	mean_normtime_f0velocity.txt
#		22)	mean_normtimeIntensity.txt
#		23)	mean_normactutime.txt
#		24)	mean_maxf0.txt
#		25)	mean_minf0.txt
#		26)	mean_excursionsize.txt
#		27)	mean_meanf0.txt
#		28)	mean_duration.txt
#		29)	mean_maxvelocity.txt
#		30)	mean_finalvelocity.txt
#		31)	mean_finalf0.txt
#		32)	mean_meanintensity.txt
#		33)	mean_maxf0_loc_ms.txt
#		34)	mean_maxf0_loc_ratio.txt

# To average across unequal number of repetitions, you can create a text file 
# (default = repetition_list.txt) in which  sound-file names are listed in a single column, with 
# blank lines separating the repetition groups. You can create this file by renaming "FileList.txt" 
# that is always generated by ProsodyPro, and then modifying it by inserting blank lines and deleting 
# sounds that you want to exclude. Note that deleting sound names in this file allows you to skip 
# sounds that you want to exclude in your final analysis.

# You can also generate mean time-normalized contours averaged across speakers. To do this, first 
# create a text file (speaker_folders.txt) containing the speaker folder names arranged in a single 
# column. Then run ProsodyPro with the 4th task--Average across speakers--checked. The script will 
# read the mean time-normalized files from all the speaker folders, taking a cross-speaker average 
# of each value. The grand averages are saved in the files listed below. In the Start window, you 
# also need to tell ProsodyPro where the speaker folder file is. The default location is the current 
# directory: "./". If it is in an upper directory, you should enter "../"

# 		mean_normactutime_cross_speaker.txt
# 		mean_normtime_f0velocity_cross_speaker.txt
# 		mean_normtime_semitonef0_cross_speaker.txt
# 		mean_normf0_cross_speaker.txt

#	A set of emotion-relevant measurements have been added since version 5.6. These are BID 
#	(Bio-informational Dimensions) measurements proposed in Xu, Kelly & Smillie (2013:
#	www.homepages.ucl.ac.uk/~uclyyix/yispapers/Xu_Kelly_Smillie2013_author_version.pdf). 
#	based on Morton, 1977, Ohala, 1984, as well as our own experimental work.

#	h1-h2 (dB) -- Amplitude difference between 1st and 2nd harmonics
#	h1*-h2* (dB) -- Formant-adjusted h1-h2 (Iseli, Shue & Alwan 2007)
#	H1-A1 (dB) -- Amplitude difference between 1st harmonic and 1st formant
#	H1-A3 (dB) -- Amplitude difference between 1st harmonic and 3rd formant
#	cpp	-- Cepstral Peak Prominence (Hillenbrand et al., 1994)
#	center_of_gravity (Hz) -- Spectral center of gravity
#	Hammarberg_index (dB) -- Difference in maximum energy between 0-2000 Hz and 2000-5000 Hz
#	energy_below_500Hz (dB) -- Energy of voiced segments below 500Hz
#	energy_below_1000Hz (dB) -- Energy of voiced segments below 1000Hz
#	Formant_dispersion1_3 (Hz) -- Average distance between adjacent formants up to F3
#	F_dispersion1_5 (Hz) -- Average distance between adjacent formants up to F5
#	median_pitch (Hz) --  Median pitch in Hertz
#	jitter -- Mean absolute difference between consecutive periods, divided by mean period
#	shimmer	-- Mean absolute difference between amplitudes of consecutive periods, divided by mean amplitude
#	harmonicity (dB) -- Harmonics-to-Noise Ratio (HNR): The degree of acoustic periodicity
#	energy_porfile -- Fifteen signal energy values computed from overlapping spectral bands of 
#		500-Hz bandwidth: 0–500, 250–750, 500–1000, ... 3250–3750, 3500–4000

form Start
	optionmenu Task: 1
		option 1. Interactive labeling
		option 2. Process all sounds without pause
		option 3. Get emsemble files
		option 4. Average across speakers
	integer Input_File_No 1
	integer Target_tier 1
	word TextGrid_extension .label
	word Sound_file_extension .wav
	comment Or .WAV, .aiff, .AIFF, .mp3, .MP3
		boolean Save_output_files 1
		boolean Extra_options 0
	comment F0 analysis options:	
		integer left_F0_range_(Hz) 75
		integer right_F0_range_(Hz) 600
		integer N._normalized_times_per_interval 10
		integer F0_sample_rate_(Hz) 100
	comment BID analysis options:	
		boolean Get_BID_measures 0
		real Energy_band_size 500
		real Energy_band_step_size 250
		integer Max_number_of_formants 5
		integer Maximum_formant_(Hz) 5000 (= male; female = 5500)
endform

if extra_options
	beginPause ("Ensemble files Options")
		word("Silence marker", "") 
		real("Perturbation length", 0)
		real("Final offset", -0.03)
		real("Smoothing window width", 0.07)
		boolean("Set initial normalized time to 0", 1)
	clicked = endPause("Cancel","Continue",2,1)
	
	if clicked = 1
		exit
	endif
else
	silence_marker$ = "" 
	perturbation_length = 0
	final_offset = -0.03
	smoothing_window_width = 0.07
	set_initial_normalized_time_to_0 = 1
endif	

if (praatVersion < 5107)
	printline Requires Praat version 5.1.07 or higher. Please upgrade your Praat version 
	exit
endif

npoints = n._normalized_times_per_interval
min_f0 = left_F0_range
max_f0 = right_F0_range

directory$ = "./"
Create Strings as file list... list 'directory$'*'sound_file_extension$'
numberOfFiles = Get number of strings
if !numberOfFiles
	Remove
	Create Strings as file list... list 'directory$'*.WAV
	numberOfFiles = Get number of strings
endif
if !numberOfFiles and task != 4
	exit There are no sound files in the folder!
elsif task != 4
	Write to raw text file... 'directory$'FileList.txt
endif

save_output_files = 1
set_initial_normalized_time_to_0 = 1
hasmeanstitle = 0
hasnormf0 = 0
hasnormtime_semitonef0 = 0
hasmean_normf0 = 0
found_interval = 0
last_means_nrows = 0
hasnormactutime = 0
hassamplef0 = 0
hasf0velocity = 0
hasnormtime_f0velocity = 0
hasf0acceleration = 0
hasnormtime_f0acceleration = 0
hasnormIntensity = 0
hasmean_normf0_cross_speaker = 0
hasBID = 0
hasVoice = 0
number = input_File_No
repetition = 1
has_number_of_repetitions = 0

if task == 4
	beginPause ("Cross-speaker averaging Options")
		word("Speaker folder file", "speaker_folders.txt")
		word("Speaker folder location", "./")
	clicked = endPause("Cancel","Continue",2,1)
	
	if clicked = 1
		exit
	endif
	
	call Cross_speaker_means mean_normf0 logarithmic
	call Cross_speaker_means mean_normtime_semitonef0 linear
	call Cross_speaker_means mean_normtime_f0velocity linear
	call Cross_speaker_means mean_normtime_f0acceleration linear
	call Cross_speaker_means mean_normactutime linear
elsif task = 3
	beginPause ("Ensemble files Options")
		integer("Number of repetitions", 0)
		boolean("Ignore extra repetitions", 0)
		word("Repetition list", "repetition_list.txt")
		boolean("Use repetition list", 0)
	clicked = endPause("Cancel","Continue",2,1)

	if clicked = 1
		exit
	endif

	if use_repetition_list
		Read Strings from raw text file... ./'repetition_list$'
		Rename... repetition_list
		nreplines = Get number of strings
	endif

	if number_of_repetitions > 0 and numberOfFiles mod number_of_repetitions and !ignore_extra_repetitions
		exit Averaging over repetitions failed. The total number of sound files cannot not be evenly divided by the number of repetitions. Please make sure to enter a correct number_of_repetitions in the startup window.
	endif
	printline 'newline$' 	Collecting data from all individual files. Please wait patiently...'newline$'
	if use_repetition_list
		for current_file from 1 to nreplines
			select Strings repetition_list
			fileName$ = Get string... current_file
			if not has_number_of_repetitions
				number_of_repetitions = 0
				while not fileName$ == "" and not fileName$ == " "
					number_of_repetitions += 1
					fileName$ = Get string... current_file+number_of_repetitions
				endwhile
				has_number_of_repetitions = 1
			endif
			fileName$ = Get string... current_file
			if fileName$ == "" or fileName$ == " "
				has_number_of_repetitions = 0
			else
				name$ = fileName$ - ".wav" - ".WAV"
				printline Reading file 'name$'	number of repetitions = 'number_of_repetitions'
				if fileReadable ("'name$'.means")
					call All_means 'name$'
					call All_normf0 'name$'
					call All_normtime_semitonef0 'name$'
					call All_samplef0 'name$'
					call All_f0velocity 'name$'
					call All_f0acceleration 'name$'
					call All_normtime_f0velocity 'name$'
					call All_normtime_f0acceleration 'name$'
					if get_BID_measures
						call All_BID
						call All_Voice 'name$'
					endif
				endif
				if repetition >= number_of_repetitions
					repetition = 1
				else
					repetition += 1
				endif
			endif
		endfor
	else
		for current_file from input_File_No to numberOfFiles
			select Strings list
			fileName$ = Get string... current_file
			name$ = fileName$ - ".wav" - ".WAV"
			rep$ = right$(name$, 1)
			if index_regex(rep$,"\D")
				rep$ = "0"
			endif

			if not (number_of_repetitions > 0 and 'rep$' > number_of_repetitions and ignore_extra_repetitions)
				printline Reading file 'name$'
				if fileReadable ("'name$'.means")
					call All_means 'name$'
					call All_normf0 'name$'
					call All_normtime_semitonef0 'name$'
					call All_samplef0 'name$'
					call All_f0velocity 'name$'
					call All_f0acceleration 'name$'
					call All_normtime_f0velocity 'name$'
					call All_normtime_f0acceleration 'name$'
					if get_BID_measures
						call All_BID
						call All_Voice 'name$'
					endif
				endif
			endif
			if number_of_repetitions > 0
				repetition = if repetition >= number_of_repetitions then 1 else repetition+1 fi
			endif
		endfor
	endif
else	
	current_file = input_File_No
	while current_file <= numberOfFiles
		hasBIDtitle = 0
		select Strings list
		fileName$ = Get string... current_file
		name$ = fileName$ - ".wav" - ".WAV"

		call Labeling 'fileName$'
		if task = 2
			current_file += 1
		else
			beginPause ("Press Done to exit")
				jump_to = current_file
				integer ("Jump to", jump_to)
			clicked2 = endPause ("Stop", "Back", "Next", "Jump", "Done", 3, 1)
			if clicked2 = 1
				plus TextGrid 'name$'
				plus PointProcess 'name$'
				Remove
				exit
			elsif clicked2 = 2
				current_file = if current_file > 1 then current_file-1 else 1 fi
			elsif clicked2 = 3
				if current_file < numberOfFiles
					current_file += 1
				else
					call Save 'directory$' 'name$'
					echo Current file number is 'current_file'.
					select Sound 'name$'
					Remove
					exit
				endif
			elsif clicked2 = 4
				current_file = if jump_to < numberOfFiles then jump_to else numberOfFiles fi
			elsif clicked2 = 5
				call Save 'directory$' 'name$'
				echo Current file number is 'current_file'.
				select Sound 'name$'
				Remove
				exit
			endif			
		endif
		call Save 'directory$' 'name$'
		select Sound 'name$'
		if task = 2 and get_BID_measures
;				plus PointProcess 'name$'
			nocheck plus Formant 'name$'
		endif
		Remove
	endwhile
endif

if task == 3
	echo Ensemble files saved:
	printline 1)	normf0.txt
	printline 2)	normtime_semitonef0.txt
	printline 3)	normtime_f0velocity.txt
	printline 3a)	normtime_f0acceleration.txt
	printline 4)	normtimeIntensity.txt
	printline 5)	normactutime.txt
	printline 6)	maxf0.txt
	printline 7)	minf0.txt
	printline 8)	excursionsize.txt
	printline 9)	meanf0.txt
	printline 10)	duration.txt
	printline 11)	maxvelocity.txt
	printline 12)	finalvelocity.txt
	printline 13)	finalf0.txt
	printline 14)	meanintensity.txt
	printline 15)	samplef0.txt
	printline 16)	f0velocity.txt
	printline 16a)	f0accleration.txt
	printline 17)	maxf0_loc_ms.txt
	printline 18)	maxf0_loc_ratio.txt
	if number_of_repetitions > 0
		printline 19)	mean_normf0.txt
		printline 20)	mean_normtime_semitonef0.txt
		printline 21)	mean_normtime_f0velocity.txt
		printline 21)	mean_normtime_f0acceleration.txt
		printline 22)	mean_normtimeIntensity.txt
		printline 23)	mean_normactutime.txt
		printline 24)	mean_maxf0.txt
		printline 25)	mean_minf0.txt
		printline 26)	mean_excursionsize.txt
		printline 27)	mean_meanf0.txt
		printline 28)	mean_duration.txt
		printline 29)	mean_maxvelocity.txt
		printline 30)	mean_finalvelocity.txt
		printline 31)	mean_finalf0.txt
		printline 32)	mean_meanintensity.txt
		printline 33)	mean_maxf0_loc_ms.txt
		printline 34)	mean_maxf0_loc_ratio.txt
	endif
endif

procedure Labeling file_name$ file_extension$
	Read from file... 'directory$''file_name$'
	name$ = file_name$ - "'sound_file_extension$'" - ".WAV"
	labelfile$ = name$+"'TextGrid_extension$'"
	textgridfile$ = name$+".TextGrid"
	if fileReadable (labelfile$)
		Read from file... 'directory$''name$''TextGrid_extension$'
	elsif fileReadable (textgridfile$)
		Read from file... 'directory$''name$'.TextGrid
	else
		To TextGrid... "interval point" point
		select TextGrid 'name$'
		dur_test = Get total duration
		dur_test1 = (dur_test/2) - 0.3
		dur_test2 = (dur_test/2) + 0.3
		Insert boundary... 1 dur_test1
		Insert boundary... 1 dur_test2
		Set interval text... 1 2 'interval1'
	endif
	plus Sound 'name$'
	if task = 2
		printline Processing sound 'current_file':	'name$'
	else
		Edit
	endif
	
	pulsefile$ = name$+".pulse"
	if fileReadable (pulsefile$)
		Read from file... 'directory$''name$'.pulse
	else
		select Sound 'name$'
		To PointProcess (periodic, cc)... min_f0 max_f0
		Rename... 'name$'
	endif
	plus Sound 'name$'
	if task <> 2
		Edit
	endif
endproc

procedure Save directory$ name$
	select TextGrid 'name$'
	nintervals = Get number of intervals... target_tier
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... target_tier m
		if label$ <> "" and label$ <> " " and label$ <> "\n" and label$ <> "'silence_marker$'" or nintervals = 1
			found_interval = 1
		endif
	endfor

	select PointProcess 'name$'
	if save_output_files
		npulses = Get number of points
		for n from 2 to npulses-1				;	Somehow Praat (v5.3.39) is giving number points + 1 for some files. Check if it is fixed in later versions.
			time1 = Get time from index... n-1
			time2 = Get time from index... n
			if time2 - time1 < 0.001
				Remove point... n
			endif
		endfor
		Write to short text file... 'directory$''name$'.pulse
;		maxperiod = 1/min_f0
;		To PitchTier... maxperiod
		To PitchTier... 0.02
		if npulses > 1
			Down to TableOfReal... Hertz
			Write to headerless spreadsheet file... 'directory$''name$'.rawf0
			Remove
		else
			printline Please add at least 3 pulse marks before proceeding!
		endif
		select PitchTier 'name$'
		call Trimf0
		Write to short text file... 'directory$''name$'.PitchTier
		Down to TableOfReal... Hertz
		Write to headerless spreadsheet file... 'directory$''name$'.f0
		Remove
	
		call Sampling
		if nintervals = 1
			printline
			printline 	No labeled intervals. Generating entire f0 track instead!
			printline
			printline 	Note that this is not very useful for most purposes.
		endif
		
		select PitchTier smoothf0
		Copy... semitonef0
		Formula... 12 * ln (self) / ln(2); semitone
		Down to TableOfReal... Hertz
		Set column label (index)... 1 time
		Set column label (index)... 2 f0 (st)
		call Differentiation semitonef0 velocity
		if found_interval
			select TableOfReal samplef0
			Write to headerless spreadsheet file... 'directory$''name$'.samplef0
			select TableOfReal velocity
			Write to headerless spreadsheet file... 'directory$''name$'.f0velocity
;			Remove
			call Differentiation velocity acceleration
			select TableOfReal acceleration
			Write to headerless spreadsheet file... 'directory$''name$'.f0acceleration
			plus TableOfReal velocity
			Remove
			select TableOfReal semitonef0
			Write to headerless spreadsheet file... 'directory$''name$'.semitonef0
			Remove
			if smoothing_window_width > 0
				select TableOfReal smoothf0
				Write to headerless spreadsheet file... 'directory$''name$'.smoothf0
			endif
		endif

		call Normalization smoothf0 normf0 normactuf0
		call Normalization semitonef0 normtime_semitonef0 normactutime_semitonef0
		call Normalization velocity normtime_f0velocity normactutime_f0velocity
		call Normalization acceleration normtime_f0acceleration normactutime_f0acceleration
		call Intensity_normalization
		if get_BID_measures
			call Voice_normalization
		endif
		if found_interval
			select TableOfReal normf0
			Write to headerless spreadsheet file... 'directory$''name$'.normtimef0
			select TableOfReal normtime_semitonef0
			Write to headerless spreadsheet file... 'directory$''name$'.normtime_semitonef0
			select TableOfReal normtime_f0velocity
			Write to headerless spreadsheet file... 'directory$''name$'.normtime_f0velocity
			select TableOfReal normtime_f0acceleration
			Write to headerless spreadsheet file... 'directory$''name$'.normtime_f0acceleration
			select TableOfReal normactuf0
			Write to headerless spreadsheet file... 'directory$''name$'.actutimenormf0
			select TableOfReal normactutime_semitonef0
			Write to headerless spreadsheet file... 'directory$''name$'.actutimesemitonef0
			select TableOfReal normactutime_f0velocity
			Write to headerless spreadsheet file... 'directory$''name$'.actutimef0velocity
			select TableOfReal normactutime_f0acceleration
			Write to headerless spreadsheet file... 'directory$''name$'.actutimef0acceleration
			select TableOfReal normtimeIntensity
			Write to headerless spreadsheet file... 'directory$''name$'.normtimeIntensity
			if get_BID_measures
				select TableOfReal normtimeVoice
				Write to headerless spreadsheet file... 'directory$''name$'.normtimeVoice
			endif
		endif
		plus TableOfReal normf0
		plus TableOfReal normactuf0
		plus TableOfReal normactutime_semitonef0
		plus TableOfReal normactutime_f0velocity
		plus TableOfReal normactutime_f0acceleration
		plus TableOfReal normtime_semitonef0
		plus TableOfReal normtime_f0velocity
		plus TableOfReal normtime_f0acceleration
		plus TableOfReal normtimeIntensity
		if not get_BID_measures
			plus PointProcess 'name$'
		endif
		if get_BID_measures
			plus TableOfReal normtimeVoice
		endif
		if smoothing_window_width > 0
			plus PitchTier smoothf0
			plus TableOfReal smoothf0
		endif
		plus PitchTier samplef0
		plus TableOfReal samplef0
		Remove
		
		call Means
		select PitchTier semitonef0
		plus PitchTier velocity
		plus PitchTier acceleration
		Remove

		select TableOfReal means
		Write to headerless spreadsheet file... 'directory$''name$'.means
		plus Intensity 'name$'
		Remove
		select PitchTier 'name$'
;		plus PitchTier velocity
		if get_BID_measures
			plus Formant 'name$'
			plus FormantTier 'name$'
			plus Harmonicity 'name$'
			plus PointProcess 'name$'
			plus TableOfReal trimmed_formant
		endif
		Remove
	else
		select TextGrid 'name$'
		plus PointProcess 'name$'
		Remove
	endif
	
	select TextGrid 'name$'
	Write to short text file... 'directory$''name$''TextGrid_extension$'
	Remove
endproc

procedure Trimf0
	maxbump = 0.01
	maxedge = 0.0
	maxgap = 0.033
	n = Get number of points
	
	first = Get value at index... 1
	second = Get value at index... 2
	penult = Get value at index... n-1
	last = Get value at index... n
	tfirst = Get time from index... 1
	if npulses < 3
		printline Please add at least 3 pulse marks before proceeding!
		exit
	endif
	tlast = Get time from index... n
	for k from 1 to 3
		call Trim
	endfor
	Remove point... 1
	Add point... tfirst second + (first-second) / 1000
	Remove point... n
	Add point... tlast penult + (last-penult) / 1000
endproc

procedure Trim
	for i from 2 to n-1
		tleft = Get time from index... i-1
		tmid = Get time from index... i
		tright = Get time from index... i+1
		gap1 = tmid - tleft
		gap2 = tright - tmid
		left = Get value at index... i-1
		mid = Get value at index... i
		right = Get value at index... i+1
		diff1 = mid - left
		diff2 = mid - right
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			Remove point... i
			Add point... tmid left+(tmid-tleft)/(tright-tleft)*(right-left)
		endif
		if diff1 > maxbump and gap2 >= maxgap
			Remove point... i
			Add point... tmid left + maxbump
		endif
		if diff2 > maxbump and gap1 >= maxgap
			Remove point... i
			Add point... tmid right + maxbump
		endif

		diff1 = left - mid
		diff2 = right - mid
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			Remove point... i
			Add point... tmid left+(tmid-tleft)/(tright-tleft)*(right-left)
		endif
		if diff1 > maxbump and gap2 >= maxgap
			Remove point... i
			Add point... tmid left - maxbump
		endif
		if diff2 > maxbump and gap1 >= maxgap
			Remove point... i
			Add point... tmid right - maxbump
		endif
	endfor
endproc

procedure Normalization pitchtier$ tableOfReal1$ tableOfReal2$
	if smoothing_window_width > 0
		select PitchTier 'pitchtier$'
	else
		select PitchTier 'name$'
	endif
	lasttime = Get finishing time
	Create TableOfReal... 'tableOfReal1$' 1 2
	Set column label (index)... 1 NormalizedTime
	Set column label (index)... 2 F0
;	Create TableOfReal... normactuf0 1 2
	Create TableOfReal... 'tableOfReal2$' 1 2
	Set column label (index)... 1 ActualTime
	Set column label (index)... 2 F0

	select TextGrid 'name$'
	nintervals = Get number of intervals... target_tier
	interval = 0
	found_interval = 0
	nrows = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... target_tier m
		if label$ <> "" and label$ <> " " and label$ <> "\n" and label$ <> "'silence_marker$'" or nintervals = 1
			start = Get starting point... target_tier m
			start1 = start + perturbation_length
			end = Get end point... target_tier m
			if smoothing_window_width > 0
				select PitchTier 'pitchtier$'
			else
				select PitchTier 'name$'
			endif
			index1 = Get high index from time... start1
			index2 = Get low index from time... end
			if found_interval = 0
				found_interval = 1
				if smoothing_window_width > 0
					select PitchTier 'pitchtier$'
				else
					select PitchTier 'name$'
				endif
				firstime = start1
			endif
			call Normalize 'pitchtier$' 'tableOfReal1$' 'tableOfReal2$'
			interval = interval + 1
		endif
	endfor
	select TableOfReal 'tableOfReal1$'
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select TableOfReal 'tableOfReal2$'
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
endproc

procedure Normalize pitchtier$ tableOfReal1$ tableOfReal2$
	duration = end - start1

	for x from 0 to npoints-1
		normtime = start1 + duration * x / npoints
		if smoothing_window_width > 0
			select PitchTier 'pitchtier$'
		else
			select PitchTier 'name$'
		endif
		f0 = Get value at time... normtime
		select TableOfReal 'tableOfReal1$'
		nrows = Get number of rows
		Set value... nrows 1 1+x+interval*npoints
		Set value... nrows 2 f0
			new_label$ = replace$(label$, " ", "_", 0)
		Set row label (index)... nrows 'new_label$'
		Insert row (index)... nrows + 1

		select TableOfReal 'tableOfReal2$'
		nrows = Get number of rows
		Set value... nrows 1 normtime
		if set_initial_normalized_time_to_0
			Set value... nrows 1 normtime-firstime
		endif
		Set value... nrows 2 f0
			new_label$ = replace$(label$, " ", "_", 0)
		Set row label (index)... nrows 'new_label$'
		Insert row (index)... nrows + 1
	endfor
endproc

procedure Intensity_normalization
	Create TableOfReal... normtimeIntensity 1 2
	Set column label (index)... 1 ActualTime
	Set column label (index)... 2 Intensity
	select Sound 'name$'
	To Intensity... 100 0 yes
	
	select TextGrid 'name$'
	nrows = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... target_tier m
		if label$ <> "" and label$ <> " " and label$ <> "\n" and label$ <> "'silence_marker$'" or nintervals = 1
			start = Get starting point... target_tier m
			start1 = start + perturbation_length
			end = Get end point... target_tier m
			select Intensity 'name$'
			duration = end - start1
			for x from 0 to npoints-1
				normtime = start1 + duration * x / npoints
				select Intensity 'name$'
				intensity = Get value at time... normtime Cubic
				select TableOfReal normtimeIntensity
				nrows = Get number of rows
				Set value... nrows 1 normtime
				if set_initial_normalized_time_to_0
					Set value... nrows 1 normtime-firstime
				endif
				Set value... nrows 2 intensity
				new_label$ = replace$(label$, " ", "_", 0)
				Set row label (index)... nrows 'new_label$'
				Insert row (index)... nrows + 1
			endfor
		endif
	endfor
	select TableOfReal normtimeIntensity
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select Intensity 'name$'
;	plus TableOfReal normactuf0
	Remove
endproc

procedure Voice_normalization
	Create TableOfReal... normtimeVoice 1 4
	Set column label (index)... 1 Time
	Set column label (index)... 2 H1-H2
	Set column label (index)... 3 H1*-H2*
	Set column label (index)... 4 CPP
	
	select Sound 'name$'
	sf = Get sampling frequency
	To Formant (burg)... 0 5 5500 0.025 50
	
	select TextGrid 'name$'
	nrows = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... target_tier m
		if not label$ = "" or nintervals = 1
			start = Get starting point... target_tier m
			start1 = start + perturbation_length
			end = Get end point... target_tier m
			select PitchTier 'name$'
			f0 = Get value at time... normtime
			duration = end - start1
			time_step = duration / (npoints - 1)
			mean_h1_h2_'m' = 0
			mean_h1_H2_'m' = 0
			mean_h1_A1_'m' = 0
			mean_h1_A3_'m' = 0
			mean_cpp_'m' = 0
			for x from 0 to npoints-1
				normtime = start1 + duration * x / npoints
				select Formant 'name$'
				f1 = Get value at time... 1 normtime Hertz Linear
				f3 = Get value at time... 3 normtime Hertz Linear
				window_start = if end - normtime < 0.125 then end - 0.25 else normtime-0.125 fi
				window_end = if normtime - start1 < 0.125 then start1+0.25 else normtime+0.125 fi
				select Sound 'name$'
				Extract part... window_start window_end Rectangular 1 yes
				To Spectrum... yes
				To PowerCepstrum
				cpp = Get peak... 60 333.3 Parabolic
				Remove
				select Spectrum 'name$'_part
				To SpectrumTier (peaks)
				Down to Table
				nrows = Get number of rows
				frequency_step = nrows / sf			; Number of peaks varies with peridicity
				f = Get value... 1 freq(Hz)
				row = 1
				while f < f0
					row += 1
					f = Get value... row freq(Hz)
				endwhile
				h1 = -32767
				for r from row-5 to row+5
					if r < 1
						r = 1
					endif
					a = Get value... r pow(dB/Hz)
					if a > h1
						h1 = a
;						freq = Get value... r freq(Hz)
					endif
				endfor
				while f < f0 * 2
					row += 1
					f = Get value... row freq(Hz)
				endwhile
				h2 = -32767
				for r from row-5 to row+5
					a = Get value... r pow(dB/Hz)
					if a > h2
						h2 = a
;						freq = Get value... r freq(Hz)
					endif
				endfor
#########################################################
				if f1 <> undefined
					f = Get value... 1 freq(Hz)
					row = 1
					while f < f1
						row += 1
						if row > nrows
							printline f1 = 'f1'
						endif
						f = Get value... row freq(Hz)
					endwhile
					a1 = -32767
					for r from row-5 to row+5
						if r < 1
							r = 1
						endif
						a = Get value... r pow(dB/Hz)
						if a > a1
							a1 = a
						endif
					endfor
					h1_A1 = h1 - a1
				else
					h1_A1 = undefined
				endif	
				if f3 <> undefined
					while f < f3
						row += 1
						f = Get value... row freq(Hz)
					endwhile
					a3 = -32767
					for r from row-5 to row+5
						if r < 1
							r = 1
						endif
						a = Get value... r pow(dB/Hz)
						if a > a3
							a3 = a
						endif
					endfor
					h1_A3 = h1 - a3
				else
					h1_A3 = undefined
				endif
#########################################################
				h1_h2 = h1 - h2
				call FormantCorrection f0 normtime
				h1_H2 = h1 - h2
				select SpectrumTier 'name$'_part
				plus Spectrum 'name$'_part
				plus Sound 'name$'_part
				plus Table 'name$'_part
				Remove
				select TableOfReal normtimeVoice
				nrows = Get number of rows
				Set value... nrows 1 normtime
				if set_initial_normalized_time_to_0
					Set value... nrows 1 normtime-firstime
				endif
				Set value... nrows 2 h1_h2
				Set value... nrows 3 h1_H2
				Set value... nrows 4 cpp
				new_label$ = replace$(label$, " ", "_", 0)
				Set row label (index)... nrows 'new_label$'
				Insert row (index)... nrows + 1
				mean_h1_h2_'m' += h1_h2
				mean_h1_H2_'m' += h1_H2
				mean_h1_A1_'m' += h1_A1
				mean_h1_A3_'m' += h1_A3
				mean_cpp_'m' += cpp
			endfor
			mean_h1_h2_'m' /= npoints
			mean_h1_H2_'m' /= npoints
			mean_h1_A1_'m' /= npoints
			mean_h1_A3_'m' /= npoints
			mean_cpp_'m' /= npoints
		endif
	endfor
	select TableOfReal normtimeVoice
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
;	select Formant 'name$'
;	Remove
endproc

procedure Sampling
	select PitchTier 'name$'
	Create TableOfReal... samplef0 1 2
	Set column label (index)... 1 SampleTime
	Set column label (index)... 2 F0

	select TextGrid 'name$'
	nintervals = Get number of intervals... target_tier
	found_interval = 0
	nrows = 0
	hassampleStart = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... target_tier m
		if label$ <> "" and label$ <> " " and label$ <> "\n" and label$ <> "'silence_marker$'" or nintervals = 1
			select TextGrid 'name$'
			start = Get starting point... target_tier m
			start1 = start + perturbation_length
			end = Get end point... target_tier m
			duration = end - start1
			if !hassampleStart
				sampleStart = start1
				sampleEnd = Get end point... target_tier nintervals
				Create PitchTier... samplef0 sampleStart sampleEnd
				hassampleStart = 1
				found_interval = 1
			endif

			select PitchTier 'name$'
			nsamples = duration * f0_sample_rate + 1
			for x from 0 to nsamples - 1
				select PitchTier 'name$'
				sample_time = start1 + x/f0_sample_rate
				f0 = Get value at time... sample_time
				select PitchTier samplef0
				Add point... sample_time f0
				select TableOfReal samplef0
				nrows = Get number of rows
				Set value... nrows 1 sample_time
				Set value... nrows 2 f0
				new_label$ = replace$(label$, " ", "_", 0)
				Set row label (index)... nrows 'new_label$'
				Insert row (index)... nrows + 1
			endfor
			sampleStart_time = sample_time + 1/f0_sample_rate
		endif
	endfor
	select TableOfReal samplef0
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	if smoothing_window_width > 0
		call Smooth samplef0 smoothf0 smoothing_window_width * f0_sample_rate
		Down to TableOfReal... Hertz
	endif
endproc

procedure Differentiation in_contour$ out_contour$
	Create PitchTier... 'out_contour$' sampleStart sampleEnd

	select TextGrid 'name$'
	nintervals = Get number of intervals... target_tier
	n_labeled_intervals = 0

	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... target_tier m
		if label$ <> "" and label$ <> " " and label$ <> "\n" and label$ <> "'silence_marker$'" or nintervals = 1
			start1 = Get starting point... target_tier m
			end = Get end point... target_tier m
			select PitchTier 'in_contour$'
			index_first = Get nearest index from time... start1
			index_last = Get nearest index from time... end
			interval_length = 0
			for x from index_first to index_last - 1
				x2 = x + 2
				x2a = x + 1
				select PitchTier 'in_contour$'
				f01 = Get value at index... x
				f02 = Get value at index... x2
				sampletime1 = Get time from index... x
				sampletime2 = Get time from index... x2
				if f0 = undefined or sampletime2 = undefined
					f02 = Get value at index... x2a
					sampletime2 = Get time from index... x2a
				endif
				derivative = (f02 - f01) / (sampletime2 - sampletime1)
				derivative_time = sampletime1
;				derivative_time = 0.5 * (sampletime1 + sampletime2)
				select PitchTier 'out_contour$'
				Add point... derivative_time derivative
				interval_length += 1
			endfor
			n_labeled_intervals += 1
			label$[n_labeled_intervals] = label$
			interval_length'n_labeled_intervals' = interval_length
		endif
	endfor
#vvvvvvvvv Added since 5.5.2
	select PitchTier 'out_contour$'
	call Trimf0
#^^^^^^^^^ Added since 5.5.2
	Down to TableOfReal... Hertz
	row = 0
	for m from 1 to n_labeled_intervals
		for x from 1 to interval_length'm'
			row += 1
			new_label$ = replace$(label$[m], " ", "_", 0)	; replacing space with underscore
			select TableOfReal 'out_contour$'
			Set row label (index)... row 'new_label$'
			select TableOfReal 'in_contour$'
			Set row label (index)... row 'new_label$'
			select TableOfReal smoothf0
			Set row label (index)... row 'new_label$'
		endfor
	endfor
endproc

procedure Means
	filedelete 'name$'.BID
	last_dispersion = 0
	select Sound 'name$'
	To Intensity... 100 0 yes
	if get_BID_measures
		select Sound 'name$'
		To Formant (burg)... 0 5 5000 0.025 50
		Down to FormantTier
		call Trimformants
		select FormantTier 'name$'
		Down to TableOfReal... yes no
		Rename... trimmed_formant
		select Sound 'name$'
		To Harmonicity (cc)... 0.01 75 0.1 1
		select Formant 'name$'
		Remove
	endif

	select TextGrid 'name$'
	nintervals = Get number of intervals... target_tier
	Create TableOfReal... means 1 11
	Set column label (index)... 1 maxf0
	Set column label (index)... 2 minf0
	Set column label (index)... 3 excursion_size
	Set column label (index)... 4 meanf0
	Set column label (index)... 5 finalf0
	Set column label (index)... 6 mean_intensity
	Set column label (index)... 7 duration
	Set column label (index)... 8 max_velocity
	Set column label (index)... 9 final_velocity
	Set column label (index)... 10 maxf0_loc_ms
	Set column label (index)... 11 maxf0_loc_ratio
	interval = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... target_tier m
		if label$ <> "" and label$ <> " " and label$ <> "\n" and label$ <> "'silence_marker$'" and nintervals <> 1
			interval = interval + 1
			start = Get starting point... target_tier m
			start1 = start + perturbation_length
			end = Get end point... target_tier m
			duration = 1000 * (end - start1)
			select TableOfReal means
			new_label$ = replace$(label$, " ", "_", 0)
			Set row label (index)... interval 'new_label$'
			select PitchTier 'name$'
			meanf0 = Get mean (points)... start1 end
			early_end = end + final_offset
			finalf0 = Get value at time... early_end
			To Pitch... 0.02 30 600
			maxf0 = Get maximum... start1 end Hertz Parabolic
			minf0 = Get minimum... start1 end Hertz Parabolic
			peakTime = Get time of maximum... start1 end Hertz Parabolic
			maxf0_loc_ms = 1000 * (peakTime - start1)
			maxf0_loc_ratio = maxf0_loc_ms / duration
			excursionsize = hertzToSemitones(maxf0) - hertzToSemitones(minf0)
			if not get_BID_measures
				Remove
			endif
			select Intensity 'name$'
			intensity = Get mean... start1 end energy
			select PitchTier 'out_contour$'
			final_velocity = Get value at time... early_end
			
			select PitchTier 'out_contour$'
			index_first = Get high index from time... start1
			index_last = Get low index from time... end
			maxvelocity = 0
			for x from index_first to index_last
				v = Get value at index... x
				if abs(v) > abs(maxvelocity)
					maxvelocity = v
				endif
			endfor
			if get_BID_measures
				call BID_measures start1 end
			endif

			select TableOfReal means
			Set value... interval 1 maxf0
			Set value... interval 2 minf0
			Set value... interval 3 excursionsize
			Set value... interval 4 meanf0
			Set value... interval 5 finalf0
			Set value... interval 6 intensity
			Set value... interval 7 duration
			Set value... interval 8 maxvelocity
			Set value... interval 9 final_velocity
			Set value... interval 10 maxf0_loc_ms
			Set value... interval 11 maxf0_loc_ratio
			Insert row (index)... interval + 1
		endif
	endfor
	select TableOfReal means
	nrows = Get number of rows
	if nrows > 1
		Remove row (index)... nrows
	endif
endproc

procedure All_means file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.means
	nrows = Get number of rows
	if number_of_repetitions > 0 and repetition == 1
		for n from 1 to nrows
			mean_maxf0'n' = 0
			mean_minf0'n' = 0
			mean_excursionsize'n' = 0
			mean_meanf0'n' = 0
			mean_duration'n' = 0
			mean_maxvelocity'n' = 0
			mean_finalvelocity'n' = 0
			mean_finalf0'n' = 0
			mean_meanintensity'n' = 0
			mean_maxf0_loc_ms'n' = 0
			mean_maxf0_loc_ratio'n' = 0
		endfor
	endif
	
	titleline$ = "Filename"
	maxf0_line$ = "_"+name$
	minf0_line$ = "_"+name$
	excursionsize_line$ = "_"+name$
	meanf0_line$ = "_"+name$
	finalf0_line$ = "_"+name$
	intensity_line$ = "_"+name$
	duration_line$ = "_"+name$
	maxvelocity_line$ = "_"+name$
	finalvelocity_line$ = "_"+name$
	maxf0_loc_ms_line$ = "_"+name$
	maxf0_loc_ratio_line$ = "_"+name$

	if number_of_repetitions > 0 
		shortname$ = left$(name$,length(name$)-1)
		mean_maxf0_line$ = "_"+shortname$
		mean_minf0_line$ = "_"+shortname$
		mean_excursionsize_line$ = "_"+shortname$
		mean_meanf0_line$ = "_"+shortname$
		mean_finalf0_line$ = "_"+shortname$
		mean_meanintensity_line$ = "_"+shortname$
		mean_duration_line$ = "_"+shortname$
		mean_maxvelocity_line$ = "_"+shortname$
		mean_finalvelocity_line$ = "_"+shortname$
		mean_maxf0_loc_ms_line$ = "_"+shortname$
		mean_maxf0_loc_ratio_line$ = "_"+shortname$
	endif

	for n from 1 to nrows
		if !hasmeanstitle
			rowname$ = Get row label... n
			titleline$ = "'titleline$'	'rowname$'"
		endif
		maxf0 = Get value... n 1
		maxf0_line$ = "'maxf0_line$'	'maxf0'"
		minf0 = Get value... n 2
		minf0_line$ = "'minf0_line$'	'minf0'"
		excursionsize = Get value... n 3
		excursionsize_line$ = "'excursionsize_line$'	'excursionsize'"
		meanf0 = Get value... n 4
		meanf0_line$ = "'meanf0_line$'	'meanf0'"
		finalf0 = Get value... n 5
		finalf0_line$ = "'finalf0_line$'	'finalf0'"
		intensity = Get value... n 6
		intensity_line$ = "'intensity_line$'	'intensity'"
		duration = Get value... n 7
		duration_line$ = "'duration_line$'	'duration'"
		maxvelocity = Get value... n 8
		maxvelocity_line$ = "'maxvelocity_line$'	'maxvelocity'"
		final_velocity = Get value... n 9
		finalvelocity_line$ = "'finalvelocity_line$'	'final_velocity'"
		maxf0_loc_ms = Get value... n 10
		maxf0_loc_ms_line$ = "'maxf0_loc_ms_line$'	'maxf0_loc_ms'"
		maxf0_loc_ratio = Get value... n 11
		maxf0_loc_ratio_line$ = "'maxf0_loc_ratio_line$'	'maxf0_loc_ratio'"

		if number_of_repetitions > 0 
			if repetition <= number_of_repetitions
				mean_maxf0'n' += ln(maxf0)
				mean_minf0'n' += ln(minf0)
				mean_excursionsize'n' += excursionsize
				mean_meanf0'n' += ln(meanf0)
				mean_duration'n' += duration
				mean_maxvelocity'n' += maxvelocity
				mean_finalvelocity'n' += final_velocity
				mean_finalf0'n' += ln(finalf0)
				mean_meanintensity'n' += intensity
				mean_maxf0_loc_ms'n' += maxf0_loc_ms
				mean_maxf0_loc_ratio'n' += maxf0_loc_ratio
			endif

			if repetition == number_of_repetitions
				mean_maxf0 = exp(mean_maxf0'n'/number_of_repetitions)
				mean_minf0 = exp(mean_minf0'n'/number_of_repetitions)
				mean_excursionsize = mean_excursionsize'n'/number_of_repetitions
				mean_meanf0 = exp(mean_meanf0'n'/number_of_repetitions)
				mean_duration = mean_duration'n'/number_of_repetitions
				mean_maxvelocity = mean_maxvelocity'n'/number_of_repetitions
				mean_finalvelocity = mean_finalvelocity'n'/number_of_repetitions
				mean_finalf0 = exp(mean_finalf0'n'/number_of_repetitions)
				mean_meanintensity = mean_meanintensity'n'/number_of_repetitions
				mean_maxf0_loc_ms = mean_maxf0_loc_ms'n'/number_of_repetitions
				mean_maxf0_loc_ratio = mean_maxf0_loc_ratio'n'/number_of_repetitions
				mean_maxf0_line$ = "'mean_maxf0_line$'	'mean_maxf0'"
				mean_minf0_line$ = "'mean_minf0_line$'	'mean_minf0'"
				mean_excursionsize_line$ = "'mean_excursionsize_line$'	'mean_excursionsize'"
				mean_meanf0_line$ = "'mean_meanf0_line$'	'mean_meanf0'"
				mean_duration_line$ = "'mean_duration_line$'	'mean_duration'"
				mean_maxvelocity_line$ = "'mean_maxvelocity_line$'	'mean_maxvelocity'"
				mean_finalvelocity_line$ = "'mean_finalvelocity_line$'	'mean_finalvelocity'"
				mean_finalf0_line$ = "'mean_finalf0_line$'	'mean_finalf0'"
				mean_meanintensity_line$ = "'mean_meanintensity_line$'	'mean_meanintensity'"
				mean_maxf0_loc_ms_line$ = "'mean_maxf0_loc_ms_line$'	'mean_maxf0_loc_ms'"
				mean_maxf0_loc_ratio_line$ = "'mean_maxf0_loc_ratio_line$'	'mean_maxf0_loc_ratio'"
			endif
		endif

	endfor
	if !hasmeanstitle
		filedelete maxf0.txt
		filedelete minf0.txt
		filedelete excursionsize.txt
		filedelete meanf0.txt
		filedelete finalf0.txt
		filedelete meanintensity.txt
		filedelete duration.txt
		filedelete maxvelocity.txt
		filedelete finalvelocity.txt
		filedelete maxf0_loc_ms.txt
		filedelete maxf0_loc_ratio.txt
		
		filedelete mean_maxf0.txt
		filedelete mean_minf0.txt
		filedelete mean_excursionsize.txt
		filedelete mean_meanf0.txt
		filedelete mean_finalf0.txt
		filedelete mean_meanintensity.txt
		filedelete mean_duration.txt
		filedelete mean_maxvelocity.txt
		filedelete mean_finalvelocity.txt
		filedelete mean_maxf0_loc_ms.txt
		filedelete mean_maxf0_loc_ratio.txt

		titleline$ = "'titleline$''newline$'"
		fileappend maxf0.txt 'titleline$'
		fileappend minf0.txt 'titleline$'
		fileappend excursionsize.txt 'titleline$'
		fileappend meanf0.txt 'titleline$'
		fileappend finalf0.txt 'titleline$'
		fileappend meanintensity.txt 'titleline$'
		fileappend duration.txt 'titleline$'
		fileappend maxvelocity.txt 'titleline$'
		fileappend finalvelocity.txt 'titleline$'
		fileappend maxf0_loc_ms.txt 'titleline$'
		fileappend maxf0_loc_ratio.txt 'titleline$'
		
		if number_of_repetitions > 0
			fileappend mean_maxf0.txt 'titleline$'
			fileappend mean_minf0.txt 'titleline$'
			fileappend mean_excursionsize.txt 'titleline$'
			fileappend mean_meanf0.txt 'titleline$'
			fileappend mean_finalf0.txt 'titleline$'
			fileappend mean_meanintensity.txt 'titleline$'
			fileappend mean_duration.txt 'titleline$'
			fileappend mean_maxvelocity.txt 'titleline$'
			fileappend mean_finalvelocity.txt 'titleline$'
			fileappend mean_maxf0_loc_ms.txt 'titleline$'
			fileappend mean_maxf0_loc_ratio.txt 'titleline$'
		endif
		hasmeanstitle = 1
	endif
	fileappend "maxf0.txt" 'maxf0_line$''newline$'
	fileappend "minf0.txt" 'minf0_line$''newline$'
	fileappend "excursionsize.txt" 'excursionsize_line$''newline$'
	fileappend "meanf0.txt" 'meanf0_line$''newline$'
	fileappend "finalf0.txt" 'finalf0_line$''newline$'
	fileappend "meanintensity.txt" 'intensity_line$''newline$'
	fileappend "duration.txt" 'duration_line$''newline$'
	fileappend "maxvelocity.txt" 'maxvelocity_line$''newline$'
	fileappend "finalvelocity.txt" 'finalvelocity_line$''newline$'
	fileappend "maxf0_loc_ms.txt" 'maxf0_loc_ms_line$''newline$'
	fileappend "maxf0_loc_ratio.txt" 'maxf0_loc_ratio_line$''newline$'
	
	if number_of_repetitions > 0 and repetition == number_of_repetitions
		fileappend "mean_maxf0.txt" 'mean_maxf0_line$''newline$'
		fileappend "mean_minf0.txt" 'mean_minf0_line$''newline$'
		fileappend "mean_excursionsize.txt" 'mean_excursionsize_line$''newline$'
		fileappend "mean_meanf0.txt" 'mean_meanf0_line$''newline$'
		fileappend "mean_finalf0.txt" 'mean_finalf0_line$''newline$'
		fileappend "mean_meanintensity.txt" 'mean_meanintensity_line$''newline$'
		fileappend "mean_duration.txt" 'mean_duration_line$''newline$'
		fileappend "mean_maxvelocity.txt" 'mean_maxvelocity_line$''newline$'
		fileappend "mean_finalvelocity.txt" 'mean_finalvelocity_line$''newline$'
		fileappend "mean_maxf0_loc_ms.txt" 'mean_maxf0_loc_ms_line$''newline$'
		fileappend "mean_maxf0_loc_ratio.txt" 'mean_maxf0_loc_ratio_line$''newline$'

		for n from 1 to nrows
			mean_maxf0'n' = 0
			mean_minf0'n' = 0
			mean_excursionsize'n' = 0
			mean_meanf0'n' = 0
			mean_duration'n' = 0
			mean_maxvelocity'n' = 0
			mean_finalvelocity'n' = 0
			mean_finalf0'n' = 0
			mean_meanintensity'n' = 0
			mean_maxf0_loc_ms'n' = 0
			mean_maxf0_loc_ratio'n' = 0
		endfor
	endif
	Remove
endproc

procedure All_normf0 file_name$
	if fileReadable ("'directory$''name$'.normtimef0")
		Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.normtimef0
	elsif fileReadable ("'directory$''name$'.timenormf0")
		Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.timenormf0
	endif
	nrows = Get number of rows
	if number_of_repetitions > 0 and repetition == 1
		for n from 1 to nrows
			mean_normf0'n' = 0
			mean_actutime'n' = 0
			mean_normtimeIntensity'n' = 0
		endfor
	endif
	titleline$ = "File/Normtime"
	resultline$ = "_"+name$
	if number_of_repetitions > 0
		mean_normf0_line$ = "_"+shortname$
		mean_actutime_line$ = "_"+shortname$
		mean_normtimeIntensity_line$ = "_"+shortname$
	endif
	for n from 1 to nrows
		if !hasnormf0
			normtime = Get value... n 1
			titleline$ = "'titleline$'	'normtime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"

		if number_of_repetitions > 0 
			nrows_meanf0 = Get number of rows
			if repetition <= number_of_repetitions
				mean_normf0'n' += ln(value)
			endif
			if repetition == number_of_repetitions
				mean_normf0 = exp(mean_normf0'n'/number_of_repetitions)
				mean_normf0_line$ = "'mean_normf0_line$'	'mean_normf0'"
			endif
		endif
	endfor
	if !hasnormf0
		filedelete normf0.txt
		fileappend normf0.txt 'titleline$''newline$'
		if number_of_repetitions > 0
			filedelete mean_normf0.txt
			fileappend mean_normf0.txt 'titleline$''newline$'
		endif
		hasnormf0 = 1
	endif
	fileappend "normf0.txt" 'resultline$''newline$'

	if number_of_repetitions > 0 
		if repetition = number_of_repetitions
			fileappend "mean_normf0.txt" 'mean_normf0_line$''newline$'
			for n from 1 to nrows
				mean_normf0'n' = 0
			endfor
		endif
	endif
	Remove

	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.actutimenormf0
	nrows = Get number of rows
	titleline$ = "Norm actual time"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasnormactutime
			titleline$ = "'titleline$'	'n'"
		endif
		value = Get value... n 1
		resultline$ = "'resultline$'	'value'"

		if number_of_repetitions > 0 
			if repetition < number_of_repetitions
				mean_actutime'n' += value
			else
				mean_actutime'n' += value
				mean_actutime = mean_actutime'n'/number_of_repetitions
				mean_actutime_line$ = "'mean_actutime_line$'	'mean_actutime'"
			endif
		endif
	endfor
	if !hasnormactutime
		filedelete normactutime.txt
		fileappend normactutime.txt 'titleline$''newline$'
		if number_of_repetitions > 0
			filedelete mean_normactutime.txt
			fileappend mean_normactutime.txt 'titleline$''newline$'
		endif
		hasnormactutime = 1
	endif
	fileappend "normactutime.txt" 'resultline$''newline$'

	if number_of_repetitions > 0 
		if repetition = number_of_repetitions
			fileappend "mean_normactutime.txt" 'mean_actutime_line$''newline$'
			for n from 1 to nrows
				mean_actutime'n' = 0
			endfor
		endif
	endif
	Remove
	
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.normtimeIntensity
	nrows = Get number of rows
	titleline$ = "Normtime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasnormIntensity
			titleline$ = "'titleline$'	'n'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"

		if number_of_repetitions > 0 
			if repetition < number_of_repetitions
				mean_normtimeIntensity'n' += value
			else
				mean_normtimeIntensity'n' += value
				mean_normtimeIntensity = mean_normtimeIntensity'n'/number_of_repetitions
				mean_normtimeIntensity_line$ = "'mean_normtimeIntensity_line$'	'mean_normtimeIntensity'"
			endif
		endif
	endfor
	if !hasnormIntensity
		filedelete normtimeIntensity.txt
		fileappend normtimeIntensity.txt 'titleline$''newline$'
		if number_of_repetitions > 0
			filedelete mean_normtimeIntensity.txt
			fileappend mean_normtimeIntensity.txt 'titleline$''newline$'
		endif
		hasnormIntensity = 1
	endif
	fileappend "normtimeIntensity.txt" 'resultline$''newline$'

	if number_of_repetitions > 0 
		if repetition = number_of_repetitions
			fileappend "mean_normtimeIntensity.txt" 'mean_normtimeIntensity_line$''newline$'
			for n from 1 to nrows
				mean_normtimeIntensity'n' = 0
			endfor
		endif
	endif
	Remove
endproc

procedure All_normtime_semitonef0 file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.normtime_semitonef0
	nrows = Get number of rows
	normtime = 0
	if number_of_repetitions > 0 and repetition == 1
		for n from 1 to nrows
			mean_normsemitonef0'n' = 0
		endfor
	endif
	title_line$ = "Normtime"
	semitonef0_line$ = "_"+name$
	if number_of_repetitions > 0
		mean_normsemitonef0_line$ = "_"+shortname$
	endif
	for n from 1 to nrows
		if !hasnormtime_semitonef0
			normtime = normtime + 1
			title_line$ = "'title_line$'	'normtime'"
		endif
		semitonef0 = Get value... n 2
		semitonef0_line$ = "'semitonef0_line$'	'semitonef0'"

		if number_of_repetitions > 0 
			nrows_meansemitonef0 = Get number of rows
			if repetition <= number_of_repetitions
				mean_normsemitonef0'n' += semitonef0
			endif
			if repetition == number_of_repetitions
				mean_normsemitonef0 = mean_normsemitonef0'n'/number_of_repetitions
				mean_normsemitonef0_line$ = "'mean_normsemitonef0_line$'	'mean_normsemitonef0'"
			endif
		endif
	endfor
	if !hasnormtime_semitonef0
		filedelete normtime_semitonef0.txt
		fileappend normtime_semitonef0.txt 'title_line$''newline$'
		if number_of_repetitions > 0
			filedelete mean_normtime_semitonef0.txt
			fileappend mean_normtime_semitonef0.txt 'title_line$''newline$'
		endif
		hasnormtime_semitonef0 = 1
	endif
	fileappend "normtime_semitonef0.txt" 'semitonef0_line$''newline$'

	if number_of_repetitions > 0 
		if repetition == number_of_repetitions
			fileappend "mean_normtime_semitonef0.txt" 'mean_normsemitonef0_line$''newline$'
		endif
	endif
	Remove
endproc

procedure All_normtime_f0velocity file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.normtime_f0velocity
	nrows = Get number of rows
	normtime = 0
	if number_of_repetitions > 0 and repetition == 1
		for n from 1 to nrows
			mean_normV0'n' = 0
		endfor
	endif
	title_line$ = "Normtime"
	v0_line$ = "_"+name$
	if number_of_repetitions > 0
		mean_normV0_line$ = "_"+shortname$
	endif
	for n from 1 to nrows
		if !hasnormtime_f0velocity
			normtime = normtime + 1
			title_line$ = "'title_line$'	'normtime'"
		endif
		v0 = Get value... n 2
		v0_line$ = "'v0_line$'	'v0'"

		if number_of_repetitions > 0 
			nrows_meanV0 = Get number of rows
			if repetition <= number_of_repetitions
				mean_normV0'n' += v0
			endif
			if repetition == number_of_repetitions
				mean_normV0 = mean_normV0'n'/number_of_repetitions
				mean_normV0_line$ = "'mean_normV0_line$'	'mean_normV0'"
			endif
		endif
	endfor
	if !hasnormtime_f0velocity
		filedelete normtime_f0velocity.txt
		fileappend normtime_f0velocity.txt 'title_line$''newline$'
		if number_of_repetitions > 0
			filedelete mean_normtime_f0velocity.txt
			fileappend mean_normtime_f0velocity.txt 'title_line$''newline$'
		endif
		hasnormtime_f0velocity = 1
	endif
	fileappend "normtime_f0velocity.txt" 'v0_line$''newline$'

	if number_of_repetitions > 0 
		if repetition == number_of_repetitions
			fileappend "mean_normtime_f0velocity.txt" 'mean_normV0_line$''newline$'
		endif
	endif
	Remove
endproc

procedure All_normtime_f0acceleration file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.normtime_f0acceleration
	nrows = Get number of rows
	normtime = 0
	if number_of_repetitions > 0 and repetition == 1
		for n from 1 to nrows
			mean_normA0'n' = 0
		endfor
	endif
	title_line$ = "Normtime"
	a0_line$ = "_"+name$
	if number_of_repetitions > 0
		mean_normA0_line$ = "_"+shortname$
	endif
	for n from 1 to nrows
		if !hasnormtime_f0acceleration
			normtime = normtime + 1
			title_line$ = "'title_line$'	'normtime'"
		endif
		a0 = Get value... n 2
		a0_line$ = "'a0_line$'	'a0'"

		if number_of_repetitions > 0 
			nrows_meanA0 = Get number of rows
			if repetition <= number_of_repetitions
				mean_normA0'n' += a0
			endif
			if repetition == number_of_repetitions
				mean_normA0 = mean_normA0'n'/number_of_repetitions
				mean_normA0_line$ = "'mean_normA0_line$'	'mean_normA0'"
;if current_file < 25
;	printline mean_normA0 = 'mean_normA0'	number_of_repetitions= 'number_of_repetitions'	repetition = 'repetition'	
;endif
			endif
		endif
	endfor
	if !hasnormtime_f0acceleration
		filedelete normtime_f0acceleration.txt
		fileappend normtime_f0acceleration.txt 'title_line$''newline$'
		if number_of_repetitions > 0
			filedelete mean_normtime_f0acceleration.txt
			fileappend mean_normtime_f0acceleration.txt 'title_line$''newline$'
		endif
		hasnormtime_f0acceleration = 1
	endif
	fileappend "normtime_f0acceleration.txt" 'a0_line$''newline$'

	if number_of_repetitions > 0 
		if repetition == number_of_repetitions
			fileappend "mean_normtime_f0acceleration.txt" 'mean_normA0_line$''newline$'
		endif
	endif
	Remove
endproc

#######################################################################################
procedure Cross_speaker_means file_name$ mode_of_averaging$
	has_meanfile = 0
	title_line$ = "Normtime"
	Read Strings from raw text file... 'speaker_folder_location$''speaker_folder_file$'
	Rename... speaker_folders
	nspeakers = Get number of strings
	speaker1$ = Get string... 1											; Get n_rows from 1st speaker
	Read Strings from raw text file... 'speaker_folder_location$''speaker1$'/'file_name$'.txt
	nrows = Get number of strings
	Remove

	for row from 1 to nrows
		newspeaker = 1
		for s from 1 to nspeakers
			select Strings speaker_folders
			speaker$ = Get string... s										; Set speaker folder name
			Read Strings from raw text file... 'speaker_folder_location$''speaker$'/'file_name$'.txt
			Extract part... row row											; Extract 1 row
			line1$ = Get string... 1										; Get current line
			line_part$ = line1$
			wrd$ = extractWord$(line1$, "")									; Get word 1
			Remove
			if s == 1 and row > 1
				speaker_mean_line$ = wrd$									; Put sound name into column 1
			endif
			n = 1
			while wrd$ != ""
				line_part$ = extractLine$(line_part$, wrd$)					; Remove current word + tab
				if row = 1 and n > 1 and s = 1
					title_line$ = "'title_line$'	'wrd$'"
				endif
				if n > 1 and wrd$ != "" and row > 1 and s <= nspeakers
					if not variableExists("speaker_mean'n'") or newspeaker == 1
						speaker_mean'n' = 0
					endif
					if mode_of_averaging$ = "logarithmic"
						speaker_mean'n' += ln('wrd$')
					else
						if wrd$ = "--undefined--"
							wrd$ = "0"
						endif
						speaker_mean'n' += 'wrd$'
					endif
				endif
				wrd$ = extractWord$(line_part$, "	")						; Get next word
				if s == nspeakers and n > 1 and row > 1 and variableExists("speaker_mean'n'")
					if mode_of_averaging$ = "logarithmic"
						speaker_mean = exp(speaker_mean'n' / nspeakers)
					else
						speaker_mean = speaker_mean'n' / nspeakers
					endif
					speaker_mean_line$ = "'speaker_mean_line$'	'speaker_mean'"
				endif
				n += 1
			endwhile
			newspeaker = 0
			select Strings 'file_name$'
			Remove
		endfor
		if !has_meanfile
			filedelete 'file_name$'_cross_speaker.txt
			fileappend "'file_name$'_cross_speaker.txt" 'title_line$''newline$'
			has_meanfile = 1
		endif
		if row > 1
			fileappend "'file_name$'_cross_speaker.txt" 'speaker_mean_line$''newline$'
		endif
	endfor
	printline File saved: 'file_name$'_cross_speaker.txt
	select Strings speaker_folders
	Remove
endproc
#######################################################################################

procedure All_samplef0 file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.samplef0
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	sampletime = -1/f0_sample_rate
	for n from 1 to nrows
		value = Get value... n 1
		if !hassamplef0
			sampletime += 1/f0_sample_rate
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hassamplef0
		filedelete samplef0.txt
		fileappend samplef0.txt 'titleline$''newline$'
		hassamplef0 = 1
	endif
	fileappend "samplef0.txt" 'resultline$''newline$'
	Remove
endproc

procedure All_f0velocity file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.f0velocity
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	sampletime = -1/f0_sample_rate
	for n from 1 to nrows
		if !hasf0velocity
			sampletime += 1/f0_sample_rate
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasf0velocity
		filedelete f0velocity.txt
		fileappend f0velocity.txt 'titleline$''newline$'
		hasf0velocity = 1
	endif
	fileappend "f0velocity.txt" 'resultline$''newline$'
	Remove
endproc

procedure All_f0acceleration file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.f0acceleration
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	sampletime = -1/f0_sample_rate
	for n from 1 to nrows
		if !hasf0acceleration
			sampletime += 1/f0_sample_rate
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasf0acceleration
		filedelete f0acceleration.txt
		fileappend f0acceleration.txt 'titleline$''newline$'
		hasf0acceleration = 1
	endif
	fileappend "f0acceleration.txt" 'resultline$''newline$'
	Remove
endproc

procedure All_Voice file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.normtimeVoice
	nrows = Get number of rows
	titleline$ = name$
	t_line$ = "_"+name$
	h1_h2line$ = "_"+name$
	h1_H2line$ = "_"+name$
	cppline$ = "_"+name$
	for n from 1 to nrows
		if !hasVoice
			titleline$ = "'titleline$'	'n'"
		endif
		time = Get value... n 1
		t_line$ = "'t_line$'	'time'"
		h1_h2 = Get value... n 2
		h1_H2 = Get value... n 3
		cpp = Get value... n 4
		h1_h2line$ = "'h1_h2line$'	'h1_h2'"
		h1_H2line$ = "'h1_H2line$'	'h1_H2'"
		cppline$ = "'cppline$'	'cpp'"
	endfor
	if !hasVoice
		filedelete Voice_time.txt
		filedelete Voice_h1_h2.txt
		filedelete Voice_h1_h2b.txt
		filedelete Voice_cpp.txt
		fileappend Voice_time.txt 'titleline$''newline$'
		fileappend Voice_h1_h2.txt 'titleline$''newline$'
		fileappend Voice_h1_h2b.txt 'titleline$''newline$'
		fileappend Voice_cpp.txt 'titleline$''newline$'
		hasVoice = 1
	endif
	fileappend "Voice_time.txt" 't_line$''newline$'
	fileappend "Voice_h1_h2.txt" 'h1_h2line$''newline$'
	fileappend "Voice_h1_h2b.txt" 'h1_H2line$''newline$'
	fileappend "Voice_cpp.txt" 'cppline$''newline$'
	Remove
endproc

procedure Smooth curve_in$ curve_out$ width
	Create PitchTier... 'curve_out$' sampleStart sampleEnd
	
	for j from 1 to width							; make a triangular window of size = width 
		if j < width / 2 + 0.5
			weight'j' = j
		else 
			weight'j' = width - j + 1
		endif
	endfor

	select PitchTier 'curve_in$'
	smooth_end = Get number of points
	smooth_end += 1

	for i from 1 to width / 2						; smooth initial points: 0 to width/2 - 1 
	    n = 0.0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... i
	    for j from 1 to width/2 + i					; window size = width/2 to width - 1
	    	j = 'j:0'
	    	rawsample = Get value at index... j
	    	index = width / 2 + j - i
	    	index = 'index:0'
			smoothsample += weight'index' * rawsample
			n += weight'index'
	    endfor
		smoothsample /= n
		select PitchTier 'curve_out$'
		if not smoothsample = undefined
			Add point... sample_time smoothsample
		endif
	endfor
	
	for i from width/2 to smooth_end - width/2				; smooth from width/2 to end-width/2
		n = 0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... i
		for j from 1 to width
	    	rawsample = Get value at index... i-width/2+j
			smoothsample += weight'j' * rawsample
			n += weight'j'
		endfor
		smoothsample /= n
		select PitchTier 'curve_out$'
		if not smoothsample = undefined
			Add point... sample_time smoothsample
		endif
	endfor
	
	i = width/2
	while i > 0										; smooth final points: end - width/2 to end
		n = 0.0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		i = 'i:0'
		sample_time = Get time from index... smooth_end-i
		j = width/2 + i
		j = 'j:0'
		while j > 1									; window size = width - 1 to width/2 
	    	rawsample = Get value at index... smooth_end-j
	    	index = width/2+i-j + 1
	    	index = round(index)
			smoothsample += weight'index' * rawsample
			n += weight'index'
			j -= 1
		endwhile
		smoothsample /= n
		select PitchTier 'curve_out$'
		if not smoothsample = undefined
			Add point... sample_time smoothsample
		endif
		i -= 1
	endwhile
endproc

procedure BID_measures starttime endtime
	titleline$ = name$
	energytitle$ = "Energy_Profile__250Hz"
	bidline$ = label$
	energyline$ = ""
	select Sound 'name$'
	Extract part... starttime endtime Rectangular 1 no

	select Pitch 'name$'
	median_pitch = Get quantile... starttime endtime 0.5 Hertz
	if median_pitch = undefined
		median_pitch = 100
	endif
	call Energy_bands
	call Formant_dispersion
	call Voice_quality
	select Pitch 'name$'
	Remove

	if !hasBIDtitle
		titleline$ = "'titleline$'	h1-h2	h1*-h2*	H1-A1	H1-A3	cpp	center_of_gravity	Hammarberg_index	energy_below_500Hz	energy_below_1000Hz	F_dispersion1_3	F_dispersion1_5	median_pitch	jitter	shimmer	harmonicity	'energytitle$''newline$'"
		fileappend 'name$'.BID 'titleline$'
		hasBIDtitle = 1
	endif
	select Sound 'name$'_part
	To Spectrum... yes
	center_gravity = Get centre of gravity... 2
	max_frequency = Get highest frequency
	hammarberg_index = Get band energy difference... 2000 5000 0 2000
;	skewness = Get skewness... 2
	energy500Hz = Get band energy... 0 500
	energy1000Hz = Get band energy... 0 1000
	total_energy = Get band energy... 0 max_frequency
	energy500Hz = energy500Hz / total_energy
	energy1000Hz = energy1000Hz / total_energy
	plus Sound 'name$'_part
	Remove
	mean_h1_h2 = mean_h1_h2_'m'
	mean_h1_H2 = mean_h1_H2_'m'
	mean_h1_A1 = mean_h1_A1_'m'
	mean_h1_A3 = mean_h1_A3_'m'
	mean_cpp = mean_cpp_'m'
	bidline$ = "'bidline$'	'mean_h1_h2'	'mean_h1_H2'	'mean_h1_A1'	'mean_h1_A3'	'mean_cpp'	'center_gravity'	'hammarberg_index'	'energy500Hz'	'energy1000Hz'	'dispersion1_3'	'dispersion1_5'	'median_pitch'	'jitter'	'shimmer'	'harmonicity''energyline$''newline$'"
	fileappend 'name$'.BID 'bidline$'
endproc

procedure Energy_bands
	center = energy_band_step_size
	for band from 1 to 15
		if band > 1
			energytitle$ = "'energytitle$'	'center'"
		endif
		floor = center - 0.5*energy_band_size
		ceiling = center + 0.5*energy_band_size
		select Sound 'name$'_part
		Filter (pass Hann band)... floor ceiling 100
		energy = Get power... 0 0
		energy = 10 * log10(50000*energy)
		energy'band' = energy
		Remove
		energyline$ = "'energyline$'	'energy'"		
		center += 0.5*energy_band_size
	endfor

	center = median_pitch		; for H1-based measures, calculate energy with pitch as reference
	bandwidth = 2 * median_pitch
;	if !hasBIDtitle
;		titleline$ = "'titleline$'	H1-H2_energy"
;		titleline$ = "'titleline$'	H1-H2_energy	H1-A1_energy	H1-A3_energy"
;	endif
	for band from 1 to 2
		floor = center - 0.5*bandwidth
		ceiling = center + 0.5*bandwidth
		select Sound 'name$'_part
		Filter (pass Hann band)... floor ceiling 100
		energy = Get power... 0 0
		energy = 10 * log10(50000*energy)
		h'band' = energy
		Remove
		center += median_pitch
	endfor
;	h1_H2_energy = h1 - h2
;	h1_A1_energy = h1 - (energy2 + energy3) / 2
;	h1_A3_energy = h1 - (energy11 + energy12 + energy13) / 3
;	bidline$ = "'bidline$'	'h1_H2_energy'"
;	bidline$ = "'bidline$'	'h1_H2_energy'	'h1_A1_energy'	'h1_A3_energy'"
endproc

procedure Formant_dispersion
	select FormantTier 'name$'
	f1 = Get value at time... 1 0.5*(starttime + endtime)
	f2 = Get value at time... 2 0.5*(starttime + endtime)
	f3 = Get value at time... 3 0.5*(starttime + endtime)
	f4 = Get value at time... 4 0.5*(starttime + endtime)
	f5 = Get value at time... 5 0.5*(starttime + endtime)

	if f1 <> undefined and f2 <> undefined and f3 <> undefined
		dispersion1_3 = (f3-f1) / 2
		if f3 < f2
			dispersion1_3 = f2-f1
		endif
	else
		dispersion1_3 = -1
	endif
	if f1 <> undefined and f3 <> undefined and f4 <> undefined and f5 <> undefined
		dispersion1_5 = (f5-f1) / 4
		if f5 = undefined or f5 < f4
			dispersion1_5 = (f4-f1) / 3
		endif
		if f4 < f3
			dispersion1_5 = dispersion1_3
		endif	
	else
		dispersion1_5 = -1
	endif
endproc

procedure Voice_quality
	select PointProcess 'name$'
	jitter = Get jitter (ddp)... starttime endtime 0.0001 0.02 1.3
	plus Sound 'name$'
	shimmer = Get shimmer (dda)... starttime endtime 0.0001 0.02 1.3 1.6
	select Harmonicity 'name$'
	harmonicity = Get mean... starttime endtime
endproc

procedure All_BID
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.BID
	nrows = Get number of rows
	ncolumns = Get number of columns
	if number_of_repetitions > 0 and repetition == 1
		for nn from 1 to nrows
			for m from 1 to ncolumns
				mean_BID'nn''m' = 0
			endfor
		endfor
	endif
	titleline$ = "File	Interval"
	if number_of_repetitions > 0
		mean_BID_titleline$ = "File	Interval"
	endif
	row_label$ = Get row label... 1

	for nn from 1 to nrows
		row_label$ = Get row label... nn
		if nn == 1
			resultline$ = "'name$'	'row_label$'"
			if number_of_repetitions > 0 ;and repetition == 1
				mean_BID_line$ = "'shortname$'	'row_label$'"
			endif
		else
			resultline$ = "__	'row_label$'"
			if number_of_repetitions > 0 and repetition == 1
				mean_BID_line$ = "__	'row_label$'"
			endif
		endif
		if number_of_repetitions > 0 and nn > 1
			mean_BID_line$ = mean_BID_line$ + "__	" + row_label$
		endif

		for m from 1 to ncolumns
			if nn == 1
				column_label$ = Get column label... m
				titleline$ = "'titleline$'	'column_label$'"
				mean_BID_titleline$ = "'mean_BID_titleline$'	'column_label$'"
			endif
			value = Get value... nn m
			resultline$ = "'resultline$'	'value'"

			if number_of_repetitions > 0 
				if repetition <= number_of_repetitions
					mean_BID'nn''m' += value
				endif

				if repetition == number_of_repetitions
					mean_BID = mean_BID'nn''m'/number_of_repetitions
					mean_BID_line$ = "'mean_BID_line$'	'mean_BID'"
				endif
			endif
		endfor
		if number_of_repetitions > 0 and nn < nrows
			mean_BID_line$ = mean_BID_line$+"'newline$'"
		endif
		if nn == 1
			if !hasBID
				filedelete BID.txt
				filedelete mean_BID.txt
				fileappend BID.txt 'titleline$''newline$'
				if number_of_repetitions > 0 and repetition == 1
					fileappend mean_BID.txt 'mean_BID_titleline$''newline$'
				endif
				hasBID = 1
			endif
		endif
		fileappend "BID.txt" 'resultline$''newline$'
	endfor

	if number_of_repetitions > 0 and repetition == number_of_repetitions
		fileappend "mean_BID.txt" 'mean_BID_line$''newline$'
		for nn from 1 to nrows
			for m from 1 to ncolumns
			mean_BID'nn''m' = 0
		endfor
	endif	
	Remove
endproc

procedure Trimformants
	maxbump = 0.01
	maxedge = 0.0
	maxgap = 0.033
	n = Get number of points
	
	tfirst = Get time from index... 1
	tlast = Get time from index... n
	for k from 1 to 3
		for m from 1 to 5
			call Trimformant m
		endfor
	endfor
endproc

procedure Trimformant m
	for i from 2 to n-1
		tleft = Get time from index... i-1
		tmid = Get time from index... i
		tright = Get time from index... i+1
		gap1 = tmid - tleft
		gap2 = tright - tmid
		left = Get value at time... m tleft
		mid = Get value at time... m tmid
		right = Get value at time... m tright
		f1 = Get value at time... 1 tmid
		f2 = Get value at time... 2 tmid
		f3 = Get value at time... 3 tmid
		f4 = Get value at time... 4 tmid
		f5 = Get value at time... 5 tmid
		b1 = Get bandwidth at time... 1 tmid
		b2 = Get bandwidth at time... 2 tmid
		b3 = Get bandwidth at time... 3 tmid
		b4 = Get bandwidth at time... 4 tmid
		b5 = Get bandwidth at time... 5 tmid
		diff1 = mid - left
		diff2 = mid - right
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			f'm' = left+(tmid-tleft)/(tright-tleft)*(right-left)
			if f'm' <> undefined and  b'm' <> undefined
				Remove point... i
				Add point... tmid 'f1' 'b1' 'f2' 'b2' 'f3' 'b3' 'f4' 'b4' 'f5' 'b5'
			endif
		endif
		if diff1 > maxbump and gap2 >= maxgap
			f'm' = left + maxbump
			if f'm' <> undefined and  b'm' <> undefined
				Remove point... i
				Add point... tmid 'f1' 'b1' 'f2' 'b2' 'f3' 'b3' 'f4' 'b4' 'f5' 'b5'
			endif
		endif
		if diff2 > maxbump and gap1 >= maxgap
			f'm' = right + maxbump
			if f'm' <> undefined and  b'm' <> undefined
				Remove point... i
				Add point... tmid 'f1' 'b1' 'f2' 'b2' 'f3' 'b3' 'f4' 'b4' 'f5' 'b5'
			endif
		endif

		diff1 = left - mid
		diff2 = right - mid
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			f'm' = left+(tmid-tleft)/(tright-tleft)*(right-left)
			if f'm' <> undefined and  b'm' <> undefined
				Remove point... i
				Add point... tmid 'f1' 'b1' 'f2' 'b2' 'f3' 'b3' 'f4' 'b4' 'f5' 'b5'
			endif
		endif
		if diff1 > maxbump and gap2 >= maxgap
			f'm' = left - maxbump
			if f'm' <> undefined and  b'm' <> undefined
				Remove point... i
				Add point... tmid 'f1' 'b1' 'f2' 'b2' 'f3' 'b3' 'f4' 'b4' 'f5' 'b5'
			endif
		endif
		if diff2 > maxbump and gap1 >= maxgap
			f'm' = right - maxbump
			if f'm' <> undefined and  b'm' <> undefined
				Remove point... i
				Add point... tmid 'f1' 'b1' 'f2' 'b2' 'f3' 'b3' 'f4' 'b4' 'f5' 'b5'
			endif
		endif
	endfor
endproc

procedure FormantCorrection f0 time_point
# Based on Iseli, M., Shue, Y.-L. and Alwan, A. (2007). Age, sex, and vowel dependencies of acoustic measures related to the voice source. Journal of the Acoustical Society of America 121: 2283-2295.
	select Formant 'name$'
	for w from 1 to 2
		w0 = 2 * pi * f0 * w
		delta = 0
		for i from 1 to 2
			fii = Get value at time... i time_point Hertz Linear
			bi = 80 + 120 * fii / 5000							; following Iseli et al. 2007
			wi = 2 * pi * fii / sf
			ri = exp(-pi * bi / sf)
			delta += 10 * log10((1-2*ri*cos(wi)+ri^2)^2 / ((1-2*ri*cos(w0+wi)+ri^2)*(1-2*ri*cos(w0-wi)+ri^2)))
		endfor
		h'w' -= delta
	endfor
endproc
